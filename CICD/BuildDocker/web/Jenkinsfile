#!/usr/bin/env groovy

pipeline {
  agent any
  stages{
      stage('Clone Repository'){
          steps{
              script{
                  deleteDir()
                  checkout scm
                }
          }
      }
        stage('Download Artifacts') {  
                steps {
                   script {
                       def server = Artifactory.server 'Art1'
                       def buildInfo = Artifactory.newBuildInfo()
                       buildInfo.env.capture = true
                       def downloadSpec = """{
                         "files": [{
                             "pattern": "orbit-releases/${VERSION}/reporting.war"
                         },
                         {
                             "pattern": "orbit-releases/${VERSION}/ORBIT_HOME.zip"
                         },
                         {
                             "pattern": "orbit-releases/orbit.properties"
                         },
                         {
                             "pattern": "orbit-releases/server.xml"
                         },
                         {
                             "pattern": "orbit-releases/setenv.sh"
                         },
                         {
                            "pattern": "orbit-releases/logging.properties"
                         },
                         {
                             "pattern": "orbit-releases/tomcat-users.xml"
                         },
                         {
                             "pattern": "orbit-releases/licenses/web/ORBITBI_5D_5S_10E_105DAYS.orbitlic"
                         }]
                       }"""
                      server.download(downloadSpec)
                       rtBuildInfo (maxBuilds: 1, maxDays: 2, doNotDiscardBuilds: ["3"], deleteBuildArtifacts: true)
                      server.publishBuildInfo buildInfo
                      }
            }
        }
        stage('Building image') {
           steps{
              script {
                 sh 'mv server.xml logging.properties tomcat-users.xml setenv.sh ${WORKSPACE}/dockerfiles/web'
                 sh 'mv ${VERSION}/reporting.war  ${WORKSPACE}/dockerfiles/web'
                 sh 'mv ${VERSION}/ORBIT_HOME.zip ${WORKSPACE}/dockerfiles/web'
                 sh 'unzip -q  ${WORKSPACE}/dockerfiles/web/ORBIT_HOME.zip -d ${WORKSPACE}/dockerfiles/web'
                 sh 'mv orbit.properties ${WORKSPACE}/dockerfiles/web/ORBIT_HOME/conf'
                 sh 'mv ${WORKSPACE}/licenses/web/*.orbitlic dockerfiles/web/ORBIT_HOME/licenses'
                 sh 'docker build -t orbitweb:${VERSION} ${WORKSPACE}/dockerfiles/web'
        }
      }
    }
      stage('Puch Image to OCR') {
        steps{
           script{
               docker.withRegistry('https://bom.ocir.io','OCRlogin'){
               sh 'docker tag orbitweb:${VERSION} bom.ocir.io/idgrosnf0lwv/orbit-int-repo/web:${VERSION}'
               sh 'docker push bom.ocir.io/idgrosnf0lwv/orbit-int-repo/web:${VERSION}'
               }
           }
        } 
     }
  }
}