#!/usr/bin/env groovy

List env_list = ["\"Select:selected\"","\"internal\"","\"external\""]
String environments = buildScript(env_list)

List internal_namespace_list = internal_list_namespaces()
List external_namespace_list = external_list_namespaces()

String internal_namespaces = buildScript(internal_namespace_list)
String external_namespaces = buildScript(external_namespace_list)

println internal_namespaces
println external_namespaces

String buildScript(List values){
  return "$values"
}

properties([
    parameters([
        [ $class: 'ChoiceParameter', 
          choiceType: 'PT_SINGLE_SELECT', 
          description: 'Select a environment',  
          name: 'ENV_TYPE', 
          script: [$class: 'GroovyScript', script: [classpath: [], sandbox: false, script: environments]]
        ],

        [ $class: 'CascadeChoiceParameter', 
          choiceType: 'PT_SINGLE_SELECT', 
          description: 'Select a namespace', 
          name: 'INSTANCE_NAME', 
          referencedParameters: 'ENV_TYPE', 
          script: [$class: 'GroovyScript', script: [ classpath: [], sandbox: true, 
          script: """ switch(ENV_TYPE){
                        case "internal" : return $internal_namespaces
                        case "external" : return $external_namespaces
                        default: return ["N/A"]
                    } """.stripIndent()]]
        ]
    ])
])

pipeline {
    agent any
     environment {
        KUBE_HOME       = "/var/lib/jenkins/.kube/config"
        PATH            = "/usr/local/bin:/usr/local/go/bin:/var/lib/snapd/snap/bin:$PATH"
    }
    stages {
        stage('Checkout') {
            steps{
                script {
                    deleteDir()
                    checkout scm
                }
            }
        }
        stage('Delete Pods') {
            steps {
                script {
                    withEnv(["KUBECONFIG=$KUBE_HOME"]) {
                        sh '''
                            kubectl delete namespace ${INSTANCE_NAME}
                            kubectl delete pv ${INSTANCE_NAME}-volume
                         '''
                     }
                 }  
             }
             post {
                 failure {
                     script {
                         echo "Namespace Deletion Failed"
                     }
                 }
             }
        }
        stage('Delete File System') {
            steps {
                script {
                    sh '${WORKSPACE}/terraform/tf_destroy.sh'
                    sh 'exit 1'
                }
            }
            post {
                failure {
                    script {
                        echo "Filesystem Deletion Failed"
                    }
                }
            }

        }
        stage('Delete user schema') {
            steps {
                script {
                    sh '${WORKSPACE}/scripts/sql_del_user.sh'
                }
            }
            post {
                failure {
                    script {
                        echo "User Schema Deletion Stage Failed"
                    }
                }
            }
        }
    }
}

def internal_list_namespaces() {
  node {
    script {
      deleteDir()
      checkout scm
      sh '''
        if [[ ! -d "${WORKSPACE}/helm/environments/internal" ]]
        then
          mkdir -p ${WORKSPACE}/helm/environments/internal
        fi
        cd ${WORKSPACE}/helm/environments/internal
        git ls-files > ${WORKSPACE}/helm/environments/internal/parameters.txt
      '''
      def internal_new_list = ["\"Select:selected\"",];
      def internal_list = readFile("${WORKSPACE}/helm/environments/internal/parameters.txt").readLines()
      for (item in internal_list) {
          def (value1, value2) = item.tokenize( '.' )
          internal_new_list.add("\"$value1\"")
      }
      sh "rm -rf ${WORKSPACE}/helm/environments/internal/parameters.txt"
      println internal_new_list
      return internal_new_list;
    }
  }
}

def external_list_namespaces() {
  node {
    script {
      deleteDir()
      checkout scm
      sh '''
        if [[ ! -d "${WORKSPACE}/helm/environments/external" ]]
        then
          mkdir -p ${WORKSPACE}/helm/environments/external
        fi
        cd ${WORKSPACE}/helm/environments/external
        git ls-files > ${WORKSPACE}/helm/environments/external/parameters.txt
      '''
      def external_new_list = ["\"Select:selected\"",];
      def external_list = readFile("${WORKSPACE}/helm/environments/external/parameters.txt").readLines()
      for (item in external_list) {
          def (value1, value2) = item.tokenize( '.' )
          external_new_list.add("\"$value1\"")
      }
      sh 'rm -rf ${WORKSPACE}/helm/environments/external/parameters.txt'
      println external_new_list
      return external_new_list;
    }
  }
}
